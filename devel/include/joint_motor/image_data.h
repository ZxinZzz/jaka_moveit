// Generated by gencpp from file joint_motor/image_data.msg
// DO NOT EDIT!


#ifndef JOINT_MOTOR_MESSAGE_IMAGE_DATA_H
#define JOINT_MOTOR_MESSAGE_IMAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int64.h>
#include <std_msgs/Int64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace joint_motor
{
template <class ContainerAllocator>
struct image_data_
{
  typedef image_data_<ContainerAllocator> Type;

  image_data_()
    : detected_point_x()
    , detected_point_y()
    , detected_point_depth()
    , area()  {
    }
  image_data_(const ContainerAllocator& _alloc)
    : detected_point_x(_alloc)
    , detected_point_y(_alloc)
    , detected_point_depth(_alloc)
    , area(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int64_<ContainerAllocator>  _detected_point_x_type;
  _detected_point_x_type detected_point_x;

   typedef  ::std_msgs::Int64_<ContainerAllocator>  _detected_point_y_type;
  _detected_point_y_type detected_point_y;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _detected_point_depth_type;
  _detected_point_depth_type detected_point_depth;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::joint_motor::image_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_motor::image_data_<ContainerAllocator> const> ConstPtr;

}; // struct image_data_

typedef ::joint_motor::image_data_<std::allocator<void> > image_data;

typedef boost::shared_ptr< ::joint_motor::image_data > image_dataPtr;
typedef boost::shared_ptr< ::joint_motor::image_data const> image_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_motor::image_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_motor::image_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_motor::image_data_<ContainerAllocator1> & lhs, const ::joint_motor::image_data_<ContainerAllocator2> & rhs)
{
  return lhs.detected_point_x == rhs.detected_point_x &&
    lhs.detected_point_y == rhs.detected_point_y &&
    lhs.detected_point_depth == rhs.detected_point_depth &&
    lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_motor::image_data_<ContainerAllocator1> & lhs, const ::joint_motor::image_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joint_motor::image_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_motor::image_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_motor::image_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_motor::image_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_motor::image_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_motor::image_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_motor::image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f5298c36c9abfd1a7f6f23e0f3b7591";
  }

  static const char* value(const ::joint_motor::image_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f5298c36c9abfd1ULL;
  static const uint64_t static_value2 = 0xa7f6f23e0f3b7591ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_motor::image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_motor/image_data";
  }

  static const char* value(const ::joint_motor::image_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_motor::image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int64 detected_point_x\n"
"std_msgs/Int64 detected_point_y\n"
"std_msgs/Float64 detected_point_depth\n"
"std_msgs/Float64 area\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::joint_motor::image_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_motor::image_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_point_x);
      stream.next(m.detected_point_y);
      stream.next(m.detected_point_depth);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_motor::image_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_motor::image_data_<ContainerAllocator>& v)
  {
    s << indent << "detected_point_x: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.detected_point_x);
    s << indent << "detected_point_y: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.detected_point_y);
    s << indent << "detected_point_depth: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.detected_point_depth);
    s << indent << "area: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_MOTOR_MESSAGE_IMAGE_DATA_H
